;1.31

;recursive approach
(define (product term a next b)
	(if (> a b) 1 (* (term a) (product term (next a) next b))))
;iterative approach
(define (product.v2 term a next b)
	(define (iter-product a res)
		(if (> a b) res (iter-product (next a) (* (term a) res))))

	(iter-product a 1))

;define factorial in terms of product
(define (identity x) x)
(define (factorial n)
	(define (inc x) (+ x 1))
	(product identity 1 inc n))

;also use product to compute approximations to using formula pi/4 = 2*4*4*6*6*8*... /3*3*5*5* . . .
;Number->Number
;given the length of the approximation, returns pi.

;where n is how large is the approximation
(define (pi-product x)
	(define (inc x) (+ x 1))
	(define (term k)
		(if (even? k)
		(/ (+ 2 k) (+ 1 k))
		(/ (+ 1 k) (+ 2 k))
		))
(product term 1 inc x))

;(* 4 (pi-product 1000)); 3.143160705532257

;another way, worse but the one I first thought about.

; (define (pi n)
; 	(define (inc x) (+ x 1))
; 	(define (term-num x)
; 		(if (even? x) (+ 2 x) (+ x 1)))
; 	(define (term-den x) 
; 		(cond
; 			[(= x 1) (+ x 2)]
; 			[(odd? x) (+ x 2)]
; 			[else (+ x 1)]))
; 	(/ (product term-num 1 inc n) (product term-den 1 inc n)))

	





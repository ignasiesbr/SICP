
;1.45

 (define (compose f g) (lambda(x) (f (g x))))
(define (average x y)
  (/(+ x y)2))
(define (average-damp f)
  (lambda (x) (average x (f x))))

(define tolerance 0.00001)

(define (fixed-point f first-guess)
  (define (close-enough? v1 v2)
    (< (abs (- v1 v2)) tolerance))
  (define (try guess)
    (let ((next (f guess)))
      (if (close-enough? guess next)
          next
          (try next))))
  (try first-guess))

(define (repeated f n)
  (cond
    [(= 1 n) f]
    [else
      (compose f (repeated f (- n 1)))]))


; if we try root x n with diferent n we arrive to the conclusion that nmax = 2^(a+1) - 1 where a is the times we apply average damping.

(define (root x n)
  (fixed-point ((repeated average-damp 7) (lambda(y) (/ x (expt y (- n 1))))) 1))



       
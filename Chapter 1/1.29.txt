;1.29

;to test

(define (cube x)
	(* x x x))


;define a procedure that takes as arguments f, a, b, n and returns the value of the integral between a and b.

;using int(f(a-b)) = *dx [f(a + dx/2) + f(a + dx +dx/2) .... ]

;First the abstractoin of sum. 
;term indicates what the program have to do with a, and next is how to treat a to keep going.

(define (sum term a next b)
  (if (> a b)
      0
      (+ (term a)
         (sum term (next a) next b))))

(define (integral f a b dx)
  (define (add-dx x) (+ x dx))
  (* (sum f (+ a (/ dx 2.0)) add-dx b)
     dx))


;simpson
(define (simpson f a b n)
  (define h (/ (- b a) n))
  (define (y-calc k) (f (+ a (* k h))))
  (define (next x) (+ x 1))
  (define (term k) 
    (* (y-calc k) 
      (cond
        [(or (= k 1) (= k n)) 1]
        [(even? k) 2]
        [else 4])))
  

  (* (sum term 0 next n) (/ h 3)))

      
; (simpson (lambda(x) (* 2 x)) 0 10 1000) ->99.99980000







;2.44 up-split

(define (right-split painter n)
  (if (= n 0)
      painter
      (let ((smaller (right-split painter (- n 1))))
        (beside painter (below smaller smaller)))))

(define (up-split painte rn)
	(if (= n 0)
	    painter
	    (let ((smaller (up-split painter (- n 1))))
		(below painter (beside smaller smaller)))))

(define (corner-split painter n)
  (if (= n 0)
      painter
      (let ((up (up-split painter (- n 1)))
            (right (right-split painter (- n 1))))
        (let ((top-left (beside up up))
              (bottom-right (below right right))
              (corner (corner-split painter (- n 1))))
          (beside (below painter top-left)
                  (below bottom-right corner))))))

(define (square-limit painter n)
  (let ((quarter (corner-split painter n)))
    (let ((half (beside (flip-horiz quarter) quarter)))
      (below (flip-vert half) half))))

;2.45

(define (right-split.v2 (split beside below)))
(define (up-split.v2 (split below beside)))

(define (split proc1 proc2)
	(lambda(painter n)
		(if (= n 0)
		    painter
		    (let ((smaller ((split proc1 proc2) painter (- n 1))))
			(proc1 painter (proc2 smaller smaller))))))


;2.46

(define (make-vector x y)
	(cons x y))
(define (x-coord-v v)
	(car v))
(define (y-coord-v v)
	(cdr v))

(define (add-vect v1 v2)
	(make-vector
		(+ (x-coord-v v1) (x-coord-v v2))
		(+ (y-coord-v v1) (y-coord-v v2))))
(define (sub-vec v1 v2)
	(make-vector
		(- (x-coord-v v1) (x-coord-v v2))
		(- (y-coord-v v1) (y-coord-v v2))))

(define (scale-vect s v)
	(make-vector
		(* s (x-coord-v v))
		(* s (y-coord-v v))))
;2.47

;1.
(define (make-frame origin edge1 edge2)
  (list origin edge1 edge2))

(define (origin1 frame)
	(car frame))
(define (edge1.1 frame)
	(car (cdr frame))
(define (edge2.1 frame)
	(car (cdr (cdr frame))))

;2.
(define (make-frame origin edge1 edge2)
  (cons origin (cons edge1 edge2)))


(define (origin2 frame)
	(car frame))
(define (edge1.2 frame)
	(car (cdr frame)))
(define (edge2.2 frame)
	(cdr (cdr frame)))

;2.48

(define (make-segment v1 v2)
	(cons v1 v2))
(define (start-segment segment)	
	(car segment))
(define (end-segment segment)
	(cdr segment))

;2.49 segments->painter

(define (segments->painter segment-list)
  (lambda (frame)
    (for-each
     (lambda (segment)
       (draw-line
        ((frame-coord-map frame) (start-segment segment))
        ((frame-coord-map frame) (end-segment segment))))
     segment-list)))

;(define (outliner frame)
;	(segments->painter (list (edge1.1 frame) (edge2.1 frame) 



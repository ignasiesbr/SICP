;2.4

(define (cons x y)
  (lambda (m) (m x y)))

(define (car z)
  (z (lambda (p q) p)))
(define (cdr z)
  (z (lambda(p q) q)))

;Substitution 
;(car (cons x y)) -> (car (lambda(m) (m x y)))
;(z (lambda (p q) p) (lambda (m) (m x y)))
;z is the procedure (cons x y), so,
;((lambda(m) (m x y)) (lambda (p q) p))
;(lambda(m)... depends on one input parameter, this will be the latter (lambda(p q) p) 
;(m x y)-> ((lambda (p q) p) x y)) -> Retrieves X.

;Pretty weird and insightful overall
;2.7

(define (add-interval x y)
  (make-interval (+ (lower-bound x) (lower-bound y))
                 (+ (upper-bound x) (upper-bound y))))

(define (mul-interval x y)
  (let ((p1 (* (lower-bound x) (lower-bound y)))
        (p2 (* (lower-bound x) (upper-bound y)))
        (p3 (* (upper-bound x) (lower-bound y)))
        (p4 (* (upper-bound x) (upper-bound y))))
    (make-interval (min p1 p2 p3 p4)
                   (max p1 p2 p3 p4))))

(define (div-interval x y)
  (mul-interval x
                (make-interval (/ 1.0 (upper-bound y))
                               (/ 1.0 (lower-bound y)))))

(define (lower-bound interval)
  (car interval))

(define (upper-bound interval)
  (cdr interval))

;2.8		

(define (make-interval x y) (cons x y))

(define (sub-interval i1 i2)
  (make-interval (abs (- (lower-bound i1) (upper-bound i2)))
								 (abs (- (upper-bound i1) (lower-bound i2)))))
(define in1 (make-interval 2 3))
(define in2 (make-interval 4 5))

;2.9 

(define (width interval)
	(/ (- (upper-bound interval) (lower-bound interval)) 2))

;(width in1 2.5) 0.5
;(width in2 4.5)0.5 

;(width (add-interval in1 in2)) -> 1 (sum of widths)
;(width (sub-interval in2 in2)) -> 0 (difference btween the two interval's width)
;(width (mul-interval in1 in2)) -> 3.5 (not true 0.5*0.5 = 0.25)
;(width (div-interval in1 in2)) -> 0.175 not true
;2.10

;modfy div-interval so it signals an error when we try to divide by 0.

(define (error x)
	x)


(define (div-interval x y)
	(cond
		[(and (<= (lower-bound y) 0) (>= (upper-bound y) 0)) (error "interval includes 0")]
		[else
			(mul-interval x
										(make-interval (/ 1.0 (upper-bound y))
																	(/ 1.0 (lower-bound y))))]))

;2.11 mul-interval

;... 

(define (make-center-width c w)
  (make-interval (- c w) (+ c w)))

;2.12
 (define (make-center-percent center percent)
	(let ((a (* center (/ percent 100.0))))
  	(make-interval (- center a) (+ center a))))

(define (center interval)
	(/ (+ (upper-bound interval) (lower-bound interval)) 2))

(define (percent interval)
	(* (/ (width interval) (center interval)) 100.0))

;2.13 Show that under the assumption fo small % tolerances, there's a simple formula to
; it end being that in a mul between two intervals, the tolerances sums.

;(percent (mul-interval (make-center-percent 5 2) (make-center-percent 4 3))) -> 5
;we can see 2 + 3 = 5

;if you compute using the simplification R1R2 / R1+R2 and 1 / ((1/r1) + (1 / r2)) we get different results. Test this.
;Interval Interval->Interval
;computes the parallel resistance with r1 r2 using the simplificated formula
(define (res-parallel1 r1 r2)
	(div-interval (mul-interval r1 r2) (add-interval r1 r2)))
;Interval Interval->Interval
;computes the parallel resistance between r1 and r2 using the traditional formula
(define one-r (make-interval 1 1))
(define (res-parallel2 r1 r2)
	(div-interval one-r (add-interval (div-interval one-r r1) (div-interval one-r r2))))

;(res-parallel1 a b)
;=> (2.7027619821283513 . 3.1455089820359277)

;(res-parallel2 a b)
;=> (2.8461077844311378 . 2.987083671811535)

;As we can see we obtain different values. 

;2.14 Demonstrate 

(define a (make-center-percent 5 2))
(define b (make-center-percent 7 3))

(define aa (div-interval a a))
(define ab (div-interval a b))

;aa
;=> (0.9607843137254903 . 1.040816326530612)
;AA should be 1. Its an aproximation of 1.


;2.15

;I think there's going to be a bigger error using the formula1 = R1R2 / R1+R2 because in this one
; R1 and R2 appears four times, and in the numerator of the forumla we can find them multiplied which would make the
; error even bigger.
;
;Also appear this big discrepance between the two formulas because we assume algebraically that R1/R1 = 1, but in our case it's not like that
;because we're not dealing with the real value of R1 but with an approximation of it.

